// <auto-generated />
using System;
using DockScripter.Repositories.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DockScripter.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241201094848_update_register_user_constraints")]
    partial class update_register_user_constraints
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("DockScripter.Domain.Entities.DockerContainerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContainerId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDateTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("DockerContainerName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("DockerImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdatedDateTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DockerContainerEntities");
                });

            modelBuilder.Entity("DockScripter.Domain.Entities.ExecutionResultEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDateTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorOutput")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorOutputFilePath")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdatedDateTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Output")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<string>("OutputFilePath")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ScriptId");

                    b.ToTable("ExecutionResultEntities");
                });

            modelBuilder.Entity("DockScripter.Domain.Entities.ScriptEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDateTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DockerContainerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntryFilePath")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasMaxLength(260)
                        .HasColumnType("TEXT");

                    b.Property<int>("Language")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastExecutedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdatedDateTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DockerContainerId");

                    b.HasIndex("UserId");

                    b.ToTable("ScriptEntities");
                });

            modelBuilder.Entity("DockScripter.Domain.Entities.ScriptFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDateTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdatedDateTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("S3Key")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ScriptId");

                    b.ToTable("ScriptFiles");
                });

            modelBuilder.Entity("DockScripter.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDateTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdatedDateTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("UserEntities");
                });

            modelBuilder.Entity("DockScripter.Domain.Entities.DockerContainerEntity", b =>
                {
                    b.HasOne("DockScripter.Domain.Entities.UserEntity", "User")
                        .WithMany("DockerContainers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DockScripter.Domain.Entities.ExecutionResultEntity", b =>
                {
                    b.HasOne("DockScripter.Domain.Entities.ScriptEntity", "Script")
                        .WithMany()
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Script");
                });

            modelBuilder.Entity("DockScripter.Domain.Entities.ScriptEntity", b =>
                {
                    b.HasOne("DockScripter.Domain.Entities.DockerContainerEntity", "DockerContainer")
                        .WithMany()
                        .HasForeignKey("DockerContainerId");

                    b.HasOne("DockScripter.Domain.Entities.UserEntity", "User")
                        .WithMany("Scripts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DockerContainer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DockScripter.Domain.Entities.ScriptFile", b =>
                {
                    b.HasOne("DockScripter.Domain.Entities.ScriptEntity", "Script")
                        .WithMany("Files")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Script");
                });

            modelBuilder.Entity("DockScripter.Domain.Entities.ScriptEntity", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("DockScripter.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("DockerContainers");

                    b.Navigation("Scripts");
                });
#pragma warning restore 612, 618
        }
    }
}
